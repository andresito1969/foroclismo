config/database.php ->  Configura las conexiones a nuestra o nuestras BBDD (gracias al fichero .env excluido por github, tenemos las credenciales)
                        De no tener dichas credenciales, tiene valores por defecto (motivos de seguridad).


database/migrations ->  Contiene las migraciones para crear la BBDD con sus tablas y atributos
                        función UP : Permite crear.
                        función Down: Revierte lo creado por el up.
                        En la CLI dependiendo de si queremos crear o no, usaremos : php artisan migrate | php artisan migrate:rollback

                        Schema::create -> hace un insert
                        Schema::table -> hace un update
                        Schema::dropIfExists('table') || Schema::drop('table') -> Permite borrar una tabla


database/seeders    ->  Contiene los seeders, usados para poder crear los datos por defecto de la BBDD, normalmente estos datos pueden ser usados
                        para poder tener datos iniciales con los que interactuar y testear la aplicación.

                        CLI -> php artisan make:seeders UserSeeder

                        Contiene una única función run con la que ejecutará el código para crear los datos, podemos crearlos con Eloquent ORM o con el query builder


app/models          ->  Contiene los modelos de datos, que nos permiten interactuar con la BBDD
                        Al crear un modelo de datos, no necesitamos especificar a qué tabla ataca, ya que si hemos creado el modelo según la conveción de laravel, 
                        el mismo modelo sabrá cómo encontrar la tabla, aún así de no encontrarla siempre podemos usar:
                            protected $table = "my_table"
                            EJ: Si tenemos la tabla users y creamos el modelo User, ya lo encontrará
                            Pero si tenemos la tabla my_users y creamos el modelo User, no lo encontrará por cómo funciona el motor interno de laravel,
                            de manera que deberíamos o crear el modelo Myuser o usar la variable $table = "my_users"


resources/views     ->  Dentro de este directorio podemos crear las vistas de nuestra aplicación

app/Http/Controllers->  Dentro de este directorio podemos crear los controladores que servirán para interactuar con la vista y el modelo de nuestra aplicación.
                        Recordemos que laravel es MVC (modelo-vista-controlador), el modelo nunca interactuará con la vista y viceversa, este paso intermedio lo realiza
                        el controlador.

                        De manera que el controlador podrá usar los métodos del modelo para hacer un CRUD (crear, leer, actualizar, borrar) y tendrá la lógica de nuestra app, que 
                        a su vez comunicará con la vista, la cual el usuario podrá ver.

                        php artisan make:controller UserController

                        Si vamos a este controlador, podemos ver que utiliza la vista user.profile, esto significa que dentro de resources/views va a buscar la carpeta user y luego
                        el archivo profile, ya que el "." determina que está dentro del directorio.

                        Luego en routes (web), podremos definir que usará ese controlador para que poniendo la url, pueda mostrar la vista con la información relativa

app/Http/Middleware ->  Dentro de este directorio podremos crear los middlewares que nos permitirán añadir capas de seguridad al momento de realizar peticiones en el navegador.
                        Es decir por ejemplo si el cliente quiere acceder a la edición de un post/topic, el middleware se encargará de permitir el acceso a esta edición,
                        revisando si el usuario está logeado y, si el usuario que quiere editar dicho post, es el usuario que inicialmente lo ha creado.
                        En caso contrario, de que no cumpla las condiciones, podrá devolver un error o redirigir a la página que querramos, en caso satisfactorio
                        podremos acceder a la vista de edición de topic/post.

